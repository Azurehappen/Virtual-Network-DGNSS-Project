
#ifndef WADGNSS_CLIENT_UTILITY_H
#define WADGNSS_CLIENT_UTILITY_H
#pragma once
#include <cstdio>
#include <cstring>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <sstream>
#include <fcntl.h>
#include <mutex>
#ifdef WIN32
#include <time.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <iphlpapi.h>
#include <winerror.h>
#else
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/tcp.h>
#include <sys/time.h>
#include <termios.h>
#include <netdb.h>
#endif
#define PI               3.141592653589793
#define R_WGS84          6378137.0             /* earth semimajor axis (WGS84) (m) */
#define F_WGS84          (1.0 / 298.257223563) /* earth flattening (WGS84) */

#define code_GPS_NONE   0
#define code_GPS_C1C    1
#define code_GPS_C1W    2
#define code_GPS_C2C    3
#define code_GPS_C2W    4
#define code_GPS_C2L    5
#define MAX_CODE_GPS    5

#define code_GAL_NONE   0
#define code_GAL_C1C    1
#define code_GAL_C1X    2
#define code_GAL_C6C    3
#define code_GAL_C5Q    4
#define code_GAL_C5X    5
#define code_GAL_C7Q    6
#define code_GAL_C7X    7
#define MAX_CODE_GAL    7

#define code_BDS_NONE   0
#define code_BDS_C2I    1
#define code_BDS_C6I    2
#define code_BDS_C7     3
#define MAX_CODE_BDS    3


// u-blox configuration commands
const unsigned char ZEDF9P_MSGOUT_OFF[] = {
    0xB5, 0x62, 0x06, 0x8A, 0x3B, 0x00, 0x00, 0x01, 0x00, 0x00, 0xA9, 0x00,
    0x91, 0x20, 0x00, 0xE0, 0x00, 0x91, 0x20, 0x00, 0xCC, 0x00, 0x91, 0x20,
    0x00, 0xD1, 0x00, 0x91, 0x20, 0x00, 0xC2, 0x00, 0x91, 0x20, 0x00, 0xD6,
    0x00, 0x91, 0x20, 0x00, 0xC7, 0x00, 0x91, 0x20, 0x00, 0xAE, 0x00, 0x91,
    0x20, 0x00, 0xEA, 0x00, 0x91, 0x20, 0x00, 0xB3, 0x00, 0x91, 0x20, 0x00,
    0xDB, 0x00, 0x91, 0x20, 0x00, 0x12, 0xF2};

const unsigned char ZEDF9P_GGAGNS_ON[] = {
    0xB5, 0x62, 0x06, 0x8A, 0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB8,
    0x00, 0x91, 0x20, 0x01, 0xBD, 0x00, 0x91, 0x20, 0x01, 0x78, 0xC6};

const unsigned char ZEDF9P_15ELEV[] = {0xB5, 0x62, 0x06, 0x8A, 0x09, 0x00,
                                       0x00, 0x01, 0x00, 0x00, 0xA4, 0x00,
                                       0x11, 0x20, 0x0A, 0x79, 0xE2};

const unsigned char ZEDF9P_GPSONLY[] = {
    0xB5, 0x62, 0x06, 0x8A, 0x4F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x31, 0x10, 0x01, 0x03, 0x00, 0x31, 0x10, 0x01, 0x07, 0x00,
    0x31, 0x10, 0x01, 0x0A, 0x00, 0x31, 0x10, 0x01, 0x0D, 0x00, 0x31,
    0x10, 0x01, 0x0E, 0x00, 0x31, 0x10, 0x01, 0x12, 0x00, 0x31, 0x10,
    0x01, 0x15, 0x00, 0x31, 0x10, 0x01, 0x18, 0x00, 0x31, 0x10, 0x01,
    0x1A, 0x00, 0x31, 0x10, 0x01, 0x1F, 0x00, 0x31, 0x10, 0x01, 0x21,
    0x00, 0x31, 0x10, 0x00, 0x22, 0x00, 0x31, 0x10, 0x00, 0x24, 0x00,
    0x31, 0x10, 0x00, 0x25, 0x00, 0x31, 0x10, 0x00, 0xEF, 0xC9};

const unsigned char M8P_GGAOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0xFF, 0x23};

const unsigned char M8P_GLLOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x01, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x00, 0x2A};

const unsigned char M8P_GSAOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x02, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x01, 0x31};

const unsigned char M8P_GSVOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x03, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x02, 0x38};

const unsigned char M8P_RMCOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x04, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x03, 0x3F};

const unsigned char M8P_VTGOFF[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                    0xF0, 0x05, 0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x04, 0x46};

const unsigned char M8P_GNSON[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00,
                                   0xF0, 0x0D, 0x00, 0x00, 0x00, 0x01,
                                   0x00, 0x00, 0x0D, 0x81};

const unsigned char M8P_GPSONLY[] = {
    0xB5, 0x62, 0x06, 0x3E, 0x24, 0x00, 0x00, 0x00, 0x1E, 0x04, 0x00,
    0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, 0x03, 0x08, 0x10, 0x00,
    0x00, 0x00, 0x01, 0x01, 0x05, 0x00, 0x03, 0x00, 0x00, 0x00};

const unsigned char M8P_15ELEV[] = {
    0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x00, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x0F, 0x00, 0xFA, 0x00,
    0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x1E, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0xCA};

std::string local_tstr();
#ifdef WIN32
uint64_t get_sec(SYSTEMTIME tv);
#else
uint64_t get_sec(timeval tv);
#endif
double D2R(double D);
void pos2ecef(std::vector<double> pos, std::vector<double> &r);
bool interpret_GNS(std::vector<double> &LLA, const std::string &GNSstr);

#endif  // WADGNSS_CLIENT_UTILITY_H
